name: Terraform Controller
description: 'Terraform Controller (DevOps)'

####----------------------------------------------------------------------------

inputs:

  aws-access-key-id:
    description: 'Terraform AWS Access Key-ID'
    required: false
    default: false

  aws-default-account:
    description: 'Terraform AWS Default Account'
    required: false
    default: false

  aws-default-profile:
    description: 'Terraform AWS Default Profile'
    required: false
    default: false

  aws-default-region:
    description: 'Terraform AWS Default Region'
    required: false
    default: false

  aws-secret-access-key:
    description: 'Terraform AWS Secret Access Key'
    required: false
    default: false

  backup-terraform:
    description: 'Backup Terraform Infrastructure'
    required: false
    default: false

  controller-functions:
    description: 'Terraform-Controller functions'
    required: false
    default: 'action.functions'

  deploy-terraform:
    description: 'Deploy Terraform Infrastructure'
    required: false
    default: false

  destroy-terraform:
    description: 'Destroy Terraform Infrastructure'
    required: false
    default: false

  dynamodb-default-region:
    description: 'Define AWS DynamoDB Default Region'
    required: false
    default: 'us-east-1'

  dynamodb-github-table:
    description: 'Define AWS DynamoDB GitHub Table'
    required: false
    default: 'github-pipelines'

  dynamodb-terraform-table:
    description: 'Define AWS DynamoDB Terraform Table'
    required: false
    default: 'terraform-pipelines'

  manage-terraform-script:
    description: 'Manage-Terraform template (script)'
    required: false
    default: 'manage-terraform.shell'

  private-keypair-file:
    description: 'Terraform Private KeyPair-File'
    required: false
    default: devops.pem

  private-keypair-name:
    description: 'Terraform Private Key-Name'
    required: false
    default: false

  provision-terraform:
    description: 'Provision Terraform Provisioning'
    required: false
    default: false

  repository--manage-profiles:
    description: 'Manage-Profile GitHub Repository'
    required: false
    default: 'emvaldes/manage-profiles'

  repository--terraform-controller:
    description: 'Terraform-Controller GitHub Repository'
    required: false
    default: 'emvaldes/terraform-controller'

  restore-account:
    description: 'Restore Terraform AWS Account'
    required: false
    default: false

  restore-index:
    description: 'Restore Terraform SHA-Index'
    required: false
    default: false

  restore-keypair-file:
    description: 'Restore Terraform KeyPair-File'
    required: false
    default: devops.pem

  restore-project:
    description: 'Restore Terraform Project'
    required: false
    default: false

  restore-region:
    description: 'Restore Terraform AWS Region'
    required: false
    default: false

  restore-shaindex:
    description: 'Restore Terraform SHA Index'
    required: false
    default: ''

  restore-terraform:
    description: 'Restore Terraform Infrastructure'
    required: false
    default: false

  restore-workspace:
    description: 'Restore Terraform Workspace'
    required: false
    default: false

  route53-subdomain:
    description: 'Define Route53 Sub-Domain'
    required: false
    default: false

  s3bucket-nameset:
    description: 'Default AWS S3 Bucket Name-Prefix'
    default: 'terraform--states--'

  s3bucket-default-region:
    description: 'Default AWS S3 Default Region'
    default: 'us-east-1'

  target-container:
    description: 'Define Terraform Container'
    required: false
    default: false

  target-timestamp:
    description: 'Define Terraform Time-Stamp'
    required: false
    default: false

  target-workspace:
    description: 'Define Terraform Workspace'
    required: false
    default: false

  terraform-config:
    description: 'Define Terraform Configuration'
    required: false
    default: false

  terraform-input-params:
    description: 'Define Terraform Input Parameters'
    required: false
    default: false

  terraform-input-tfvars:
    description: 'Define Terraform Input Variables'
    required: false
    default: false

  terraform-planfile:
    description: 'Define Terraform Planfile Name'
    required: false
    default: 'terraform'

  terraform-tfstate:
    description: 'Define Terraform System-State'
    required: false
    default: false

  upgrade-providers:
    description: 'Upgrade Terraform Providers'
    default: false

  validate-terraform:
    description: 'Validate Terraform Formatting'
    default: true

  terraform-loglevel:
    description: 'Define Terraform Loglevel'
    required: false
    default: false

  debuger-mode:
    description: 'Enabling Shell Debugger'
    required: false
    default: false

  verbose-mode:
    description: 'Enabling Verbosity'
    required: false
    default: false

####----------------------------------------------------------------------------

runs:
  using: "composite"
  steps:

    - name: Terraform Controller
      id: terraform-controller
      shell: bash
      run: |

        ## Enabling Debuger-mode:
        [[ ${{ inputs.debuger-mode }} == true ]] && set -x ;

        ####--------------------------------------------------------------------
        completion="Skipping ...! " ;
        ####--------------------------------------------------------------------

        ####--------------------------------------------------------------------
        export github_workspace="${{ github.workspace }}";
        ####--------------------------------------------------------------------

        github_usercontent="https://raw.githubusercontent.com" ;
        usercontent_repository="${github_usercontent}/${{ inputs.repository--manage-profiles }}/master" ;
        usercontent_controller="${github_usercontent}/${{ inputs.repository--terraform-controller }}/master" ;

        ####--------------------------------------------------------------------

        manage_terraform_script="${{ inputs.manage-terraform-script }}" ;
        manage_terraform_template="${{ github.workspace }}/${manage_terraform_script}" ;
        echo -e "\nDownloading Terraform Management Script: ${manage_terraform_template} ..." ;
        wget --quiet --output-document=${manage_terraform_template} ${usercontent_controller}/.github/templates/${manage_terraform_script} ;

        ####--------------------------------------------------------------------

        echo -e "\nDownloading Terraform Controller Functions: ${{ inputs.controller-functions }} ..." ;
        wget --quiet --output-document=./${{ inputs.controller-functions }} ${usercontent_controller}/${{ inputs.controller-functions }} ;
        echo -e "\nSourcing Terraform Controller Functions ..." ;
        source ${{ inputs.controller-functions }} ;
        echo -e ;

        ####--------------------------------------------------------------------

        tree -FCla --prune -I .git ${{ github.workspace }} ;

        ####--------------------------------------------------------------------

        ####--------------------------------------------------------------------
        remote_origin="$(git config --get remote.origin.url)" ;
        github_repository="${remote_origin##*\/}" ;
        commit_shaid="$(git rev-parse HEAD)" ;
        ####--------------------------------------------------------------------
        dynamodb_default_region="${{ inputs.dynamodb-default-region }}" ;
        dynamodb_github_table="${{ inputs.dynamodb-github-table }}" ;
        dynamodb_terraform_table="${{ inputs.dynamodb-terraform-table }}" ;
        ####--------------------------------------------------------------------
        s3bucket_default_region="${{ inputs.s3bucket-default-region }}" ;
        ####--------------------------------------------------------------------
        route53_subdomain="${{ inputs.route53-subdomain }}" ;
        [[ "${route53_subdomain}" == false ]] && {
            route53_subdomain="${github_repository}" ;
          } ;
        target_workspace="${{ inputs.target-workspace }}" ;
        [[ "${target_workspace}" == false ]] && {
            target_workspace="${TARGET_WORKSPACE}" ;
          } ;
        target_timestamp="${{ inputs.target-timestamp }}" ;
        [[ "${target_timestamp}" == false ]] && {
            target_timestamp="${SESSION_TIMESTAMP}" ;
            [[ ${#target_timestamp} -eq 0 ]] && {
                echo -e "\nWarning: Session Time-Stamp is invalid! \n" ;
                exit 1;
              } ;
          } ;
        ####--------------------------------------------------------------------
        custom_filepath="${target_timestamp:0:2}/${target_timestamp:2:2}/${target_timestamp:4:2}/${target_timestamp:6:6}" ;
        target_buildset="${target_workspace}/${custom_filepath}/$(git rev-parse --short HEAD)" ;
        ####--------------------------------------------------------------------
        terraform_tfstate="${{ github.workspace }}/terraform.tfstate.d" ;
        terraform_tfplan="${terraform_tfstate}/${target_workspace}/${{ inputs.terraform-planfile }}.tfplan" ;
        ####--------------------------------------------------------------------
        terraform_verbosity="${{ inputs.terraform-loglevel }}" ;
        [[ "${terraform_verbosity}" != false ]] && {
            terraform_verbosity="TF_LOG=${{ inputs.terraform-logLevel }}" ;
          } || {
            terraform_verbosity='' ;
          } ;
        ####--------------------------------------------------------------------
        terraform_loglevel="${{ inputs.terraform-loglevel }}" ;
        ####--------------------------------------------------------------------
        aws_default_profile="${{ inputs.aws-default-profile }}" ;
        [[ "${aws_default_profile}" == false ]] && {
            aws_default_profile="${AWS_DEFAULT_PROFILE}" ;
          } ;
        [[  ${#AWS_DEFAULT_ACCOUNT} -eq 0 ]] && {
            export AWS_DEFAULT_ACCOUNT="$(
                grep 'x_principal_arn'  ${{ github.workspace }}/.aws/credentials | cut -d':' -f5
              )" ;
          } ;
        aws_default_account="${{ inputs.aws-default-account }}" ;
        [[ "${aws_default_account}" == false ]] && {
            aws_default_account="${AWS_DEFAULT_ACCOUNT}" ;
          } ;
        aws_default_region="${{ inputs.aws-default-region }}" ;
        [[ "${aws_default_region}" == false ]] && {
            aws_default_region="${AWS_DEFAULT_REGION}" ;
          } ;
        aws_access_key_id="${{ inputs.aws-access-key-id }}" ;
        [[ "${aws_access_key_id}" == false ]] && {
            aws_access_key_id="${AWS_ACCESS_KEY_ID}" ;
          } ;
        aws_secret_access_key="${{ inputs.aws-secret-access-key }}" ;
        [[ "${aws_secret_access_key}" == false ]] && {
            aws_secret_access_key="${AWS_SECRET_ACCESS_KEY}" ;
          } ;
        ####--------------------------------------------------------------------
        terraform_s3bucket="${{ inputs.s3bucket-nameset }}${aws_default_account}" ;
        ####--------------------------------------------------------------------
        target_container="${{ inputs.target-container }}" ;
        [[ "${target_container}" == false ]] && {
            target_container="${S3BUCKET_CONTAINER}" ;
            [[ ${#target_container} -eq 0 ]] && {
                target_container="environments" ;
              } ;
          } ;
        ####--------------------------------------------------------------------
        target_location="${target_container}/${target_buildset}";
        scripts_location="s3://${terraform_s3bucket}/${target_location}/scripts" ;
        ####--------------------------------------------------------------------
        restore_script_location="${scripts_location}/restore.shell" ;
        destroy_script_location="${scripts_location}/destroy.shell" ;
        ####--------------------------------------------------------------------
        keypair_file=".ssh/${{ inputs.private-keypair-file }}" ;
        [[ "${keypair_file}" == false ]] && {
            keypair_file=".ssh/${PRIVATE_KEYPAIR_FILE}" ;
          } ;
        target_keypair_file="$(
            echo ${keypair_file} | sed -e "s|${{ github.workspace }}/||g"
          )" ;
        keypair_name="${{ inputs.private-keypair-name }}" ;
        [[ "${keypair_name}" == false ]] && {
            keypair_name="${PRIVATE_KEYPAIR_NAME}" ;
          } ;
        [[ ${#keypair_name} -eq 0 ]] && {
            echo -e "\nWarning: Invalid Key-Pair Name! \n" ;
            exit 1 ;
          } ;
        ####--------------------------------------------------------------------
        target_path='/tmp/terraform' ;
        restore_folder="${target_path}/${target_timestamp}" ;
        mkdir -p ${restore_folder} ;
        ####--------------------------------------------------------------------
        destroy_script="${target_path}/destroy.shell" ;
        restore_script="${target_path}/restore.shell" ;
        ####--------------------------------------------------------------------
        declare -a managed_scripts=(${restore_script} ${destroy_script}) ;
        configure_terraform_template ;
        ####--------------------------------------------------------------------
        if [[ "${{ inputs.provision-terraform }}" == true ]]; then
          if [[ ${{ inputs.upgrade-providers }} == true ]]; then
            echo -e "\nUpgrading Terraform Providers On-Demand ..." ;
            eval ${terraform_verbosity} \
                 terraform 0.13upgrade -yes ;
          fi;
          eval ${terraform_verbosity} \
               terraform init ;
          ####------------------------------------------------------------------
          ## Patching .terraform/modules/vpc/main.tf
          patch ${{ github.workspace }}/.terraform/modules/vpc/main.tf \
                < ${{ github.workspace }}/patches/terraform/modules/vpc/main.patch ;
          ####------------------------------------------------------------------
          eval ${terraform_verbosity} \
               terraform workspace list ;
          eval ${terraform_verbosity} \
               terraform workspace new ${target_workspace} 2>/dev/null ;
          if [[ ${{ inputs.validate-terraform }} == true ]]; then
            eval ${terraform_verbosity} \
                 terraform fmt -check ;
          fi;
          eval ${terraform_verbosity} \
               terraform validate 2>/dev/null ;
          completion="Completed! " ;
        fi;

        ####--------------------------------------------------------------------
        if [[ "${{ inputs.provision-terraform }}" == true ]]; then
          input_params="${{ inputs.terraform-input-params }}" ;
          [[ "${input_params}" == false ]] && input_params='' ;
          oIFS="${IFS}"; IFS='_' ;
          if [[ ${#input_params[@]} -gt 0 ]]; then
            echo -e "Terraform Custom Parameters:" ;
            for encoded in ${input_params[@]}; do
              decoded="$(echo -en ${encoded} | base64 --decode)" ;
              echo -e "${encoded} -> ${decoded}" ;
            done ; echo -e ;
          fi ;
          IFS="${oIFS}" ;
          input_tfvars="${{ inputs.terraform-input-tfvars }}" ;
          [[ "${input_tfvars}" == false ]] && input_tfvars='' ;
          if [[ ${#input_tfvars} -gt 0 ]]; then
            tfvars_file="${{ github.workspace }}/${input_tfvars}" ;
            custom_message="Custom Terraform Variables file [${input_tfvars}]" ;
            if [[ -e ${tfvars_file} ]]; then
                    echo -e "Listing ${custom_message}:" ;
                    ls -al ${tfvars_file} ; echo -e ;
              else  echo -e "Notice: ${custom_message} does not exit! \n" ;
            fi ;
          fi ;
          echo -e "Terraform Output Plan: ${terraform_tfplan}\n" ;
          custom_message="Private-KeyPair File: [${keypair_file}]" ;
          if [[ -e ${keypair_file} ]]; then
                  echo -e "Listing ${custom_message}:" ;
                  ls -al ${keypair_file} ; echo -e ;
            else  echo -e "Warning: ${custom_message} does not exit! \n" ;
                  exit 1 ;
          fi ;
          echo -e "Private-KeyPair File: ${keypair_file}" ; echo -e ;
          echo -e "Private-KeyPair Name: ${keypair_name}" ; echo -e ;
          target_custom_tfvars="$(
              echo ${tfvars_file} | sed -e "s|${{ github.workspace }}/||g"
            )" ;
          custom_tfvars='';
          [[ ${#target_custom_tfvars} -gt 0 ]] && custom_tfvars="-var-file=\"${target_custom_tfvars}\"" ;
          target_terraform_tfplan="$(
              echo ${terraform_tfplan} | sed -e "s|${{ github.workspace }}/||g"
            )" ;
          declare -a terraform_parameters=();
          terraform_parameters+=("-var=\"region=${aws_default_region}\"") ;
          terraform_parameters+=("-var=\"aws_access_key=${aws_access_key_id}\"") ;
          terraform_parameters+=("-var=\"aws_secret_key=${aws_secret_access_key}\"") ;
          terraform_parameters+=("-var=\"private_keypair_file=${target_keypair_file}\"") ;
          terraform_parameters+=("-var=\"private_keypair_name=${keypair_name}\"") ;
          oIFS="${IFS}"; IFS='_' ;
          for param in ${input_params[@]}; do
            terraform_parameters+=("-var=\"$(echo -en ${param} | base64 --decode)\"") ;
          done ;
          IFS="${oIFS}" ;

          cat "${{ github.workspace }}/.aws/config" ;
          echo -e ;
          cat "${{ github.workspace }}/.aws/credentials" ;

          echo -e "\nListing Terraform Plan command:\n" ;
          echo ${terraform_verbosity} \
               terraform plan \
                         ${terraform_parameters[*]} \
                         ${custom_tfvars} \
                         -out ${target_terraform_tfplan} ; echo -e ;

          which aws ;
          aws --version ;
          
          aws --profile default --region us-east-1 ec2 describe-key-pairs --key-name devops
          aws --profile default --region us-east-1 iam list-users --query 'Users[?UserName==`devops`]'
          
          echo -e "TF Parameters:\n${terraform_parameters[*]}" ;

          echo -e "\nTF Configs Vars\n${{ github.workspace }}/configs/${target_workspace}-configs.tfvars" ;
          cat -n ${{ github.workspace }}/configs/${target_workspace}-configs.tfvars ;

          echo -e "\nTerraform Plan:\n${target_terraform_tfplan}" ;

          eval ${terraform_verbosity} \
               terraform plan \
                         ${terraform_parameters[*]} \
                         ${custom_tfvars} \
                         -out ${target_terraform_tfplan} ;

          completion="Completed! " ;
        fi ;

        ####--------------------------------------------------------------------
        if [[ "${{ inputs.provision-terraform }}" == true ]]; then
          github_author_name="${{ github.actor }}" ;
          github_repository_branch="${{ github.ref }}" ;
          github_repository_owner="${{ github.repository_owner }}" ;
          setup_dynamodb_github ;
          setup_dynamodb_terraform ;
          completion="Completed! " ;
        fi ;
        ####--------------------------------------------------------------------
        if [[ "${{ inputs.deploy-terraform }}" == true ]]; then
          custom_message="Terraform Input Plan: [${terraform_tfplan}]" ;
          if [[ -e ${terraform_tfplan} ]]; then
                  echo -e "Listing ${custom_message}:" ;
                  ls -al ${terraform_tfplan} ; echo -e ;
            else  echo -e "Notice: ${custom_message} does not exit! \n" ;
                  exit 1 ;
          fi ;
          eval ${terraform_verbosity} \
               terraform apply -auto-approve -compact-warnings ${terraform_tfplan} ;
          completion="Completed! " ;
        fi ;
        ####--------------------------------------------------------------------
        if [[ "${{ inputs.deploy-terraform }}" == true ]]; then
          update_dynamodb_terraform ;
          echo -e "\nHow-To Destroy Terraform Infrastructure State:" ;
          echo -e "-> ${destroy_script_location}\n" ;
          cat ${destroy_script} ;
          completion="Completed! " ;
        fi ;
        ####--------------------------------------------------------------------
        if [[ "${{ inputs.terraform-config }}" == true ]]; then
          eval ${terraform_verbosity} \
               terraform show \
          | tee ${terraform_tfstate}/${target_workspace}/terraform.show ;
          completion="Completed! " ;
        fi ;
        ####--------------------------------------------------------------------
        if [[ "${{ inputs.terraform-tfstate }}" == true ]]; then
          tree ${terraform_tfstate} ;
          target_state="$(
              find ${terraform_tfstate} -type f -name terraform.tfstate | head -n1
            )" ;
          echo -e "\nDisplaying Terraform State: ${target_state}" ;
          cat ${target_state} ;
          completion="Completed! " ;
        fi ;
        ####--------------------------------------------------------------------
        if [[ "${{ inputs.backup-terraform }}" == true ]]; then
          backup_terraform_configs ;
          completion="Completed! " ;
        fi ;
        ####--------------------------------------------------------------------
        if [[ "${{ inputs.destroy-terraform }}" == true ]]; then
          eval ${terraform_verbosity} \
               terraform destroy -auto-approve ;
          echo -e "\nHow-To Restore Terraform Infrastructure State:\n" ;
          echo -e "-> ${restore_script_location}\n" ;
          cat ${restore_script} ;
          completion="Completed! " ;
        fi ;
        ####--------------------------------------------------------------------
        if [[ "${{ inputs.restore-terraform }}" == true ]]; then
          restore_shaindex="${{ inputs.restore-shaindex }}" ;
          restore_region="${{ inputs.restore-region }}" ;
          restore_project="${{ inputs.restore-project }}" ;
          restore_s3bucket="${terraform_s3bucket}" ;
          restore_terraform_state ;
          completion="Completed! " ;
        fi ;

        ####--------------------------------------------------------------------
        echo -e "\n${completion}\n" ;
        ####--------------------------------------------------------------------
