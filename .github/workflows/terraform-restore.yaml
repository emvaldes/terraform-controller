name: GitHub Actions - Terraform Restore
on:

####----------------------------------------------------------------------------
  workflow_dispatch:
    name: Manual Deployment
    description: 'Triggering Manual Deployment'
    inputs:
      region:
        description: 'Target AWS Region'
        required: true
        default: 'us-east-1'
      temporary-credentials:
        description: 'AWS Temporary Credentials'
        required: false
        default: false
      keypair-name:
        description: 'Private Key-Pair Name'
        required: true
        default: 'devops'
      keypair-secret:
        description: 'Private Key-Pair Secret'
        required: true
        default: ''
      restore-project:
        description: 'Terraform Restore Project'
        required: true
        default: 'terraform-controller'
      restore-shaindex:
        description: 'Terraform Restore Index'
        required: true
        default: ''
      terraform-version:
        description: 'Terraform CLI Version (latest)'
        required: false
        default: '1.0.11'
      ####----------------------------------------------------------------------
      # logLevel:
      #   description: 'Log level'
      #   required: true
      #   default: 'warning'
      # tags:
      #   description: 'Terraform Restore'
####----------------------------------------------------------------------------
  # push:
  #   branches: [ master ]
  #   paths:
  #     - action.yaml
####----------------------------------------------------------------------------
env:
  ## AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  ## AWS_DEFAULT_ACCOUNT: ${{ secrets.AWS_DEFAULT_ACCOUNT }}
  ## AWS_DEFAULT_PROFILE: ${{ secrets.AWS_DEFAULT_PROFILE }}
  ## AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ## AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ## Terraform Operations: Deploy, Destroy
  ## BACKUP_TERRAFORM: ${{ secrets.BACKUP_TERRAFORM }}
  ## DEPLOY_TERRAFORM: ${{ secrets.DEPLOY_TERRAFORM }}
  ## DESTROY_TERRAFORM: ${{ secrets.DESTROY_TERRAFORM }}
  ## DEVOPS_ASSUMEROLE_POLICY
  ## DEVOPS_BOUNDARIES_POLICY
  ## DEVOPS_ACCESS_POLICY
  ## DEVOPS_ACCESS_ROLE: ${{ secrets.DEVOPS_ACCESS_ROLE }}
  ## DEVOPS_ACCOUNT_NAME: ${{ secrets.DEVOPS_ACCOUNT_NAME }}
  DYNAMODB_DEFAULT_REGION: us-east-1  ## ${{ secrets.DYNAMODB_DEFAULT_REGION }}
  ## INSPECT_DEPLOYMENT

  ## PRIVATE_KEYPAIR_FILE: devops.pem  ## ${{ secrets.PRIVATE_KEYPAIR_FILE }}
  PRIVATE_KEYPAIR_FILE: ${{ secrets.PRIVATE_KEYPAIR_FILE }}

  ## PRIVATE_KEYPAIR_NAME: ${{ secrets.PRIVATE_KEYPAIR_NAME }}
  ## PRIVATE_KEYPAIR_SECRET: ${{ secrets.PRIVATE_KEYPAIR_SECRET }}
  ## PROVISION_TERRAFORM
  S3BUCKET_CONTAINER: pipelines
  S3BUCKET_DEFAULT_REGION: us-east-1  ## ${{ secrets.S3BUCKET_DEFAULT_REGION }}
  ## TERRAFORM_VERSION
  ## TARGET_WORKSPACE: pipelines/${{ secrets.TARGET_WORKSPACE }}
  ## UPDATE_PYTHON_LATEST
  ## UPDATE_SYSTEM_LATEST
  ##
####----------------------------------------------------------------------------
jobs:
  terraform-restore:
    runs-on: ubuntu-latest
    steps:
####----------------------------------------------------------------------------
      - name: checkout
        uses: actions/checkout@v2
####----------------------------------------------------------------------------
      ## Environment Variables
      - name: Environment Variables
        id: environment-variables
        run: |
          ####------------------------------------------------------------------
          ## Parsing GitHub Action - Workflow dispatch (limited to 10 input-params)
          echo -e "Processing File|Input-based Parameters ... [ 1-10 ]\n" ;
          ####------------------------------------------------------------------
          echo "SESSION_TIMESTAMP=$(date +"%y%m%d%H%M%S")" >> ${GITHUB_ENV} ;
          ####------------------------------------------------------------------
          cloud_region="${{ github.event.inputs.region }}" ;
          if [[ (${#cloud_region} -gt 0 ) || (${cloud_region} != '') ]]; then
            echo -e "   Target Cloud Region [input-based]: '${cloud_region}'" ;
            echo "AWS_DEFAULT_REGION=${cloud_region}" >> ${GITHUB_ENV} ;
          fi ;
          ####------------------------------------------------------------------
          ## Correcting single-lined parameter spacing issues.
          declare -a temporary_credentials=($(
              echo -en "${{ github.event.inputs.temporary-credentials }}" \
              | sed -e 's|[[:space:]]|*|g' \
              | sed -e 's|\*=\*|~=~|g'
            )) ;
          if [[ ${temporary_credentials} != false ]]; then
                  echo -e " Temporary Credentials [input-based]:" ;
                  export TEMPORARY_CREDENTIALS="$(
                      echo -en "${temporary_credentials[@]}" \
                      | tr '\*' '\n' | tr '~' ' ' \
                      | base64 -w0
                    )" ;
                  echo -e "${TEMPORARY_CREDENTIALS}\n" | base64 --decode ; echo -e ;
                  echo -e "TEMPORARY_CREDENTIALS=${TEMPORARY_CREDENTIALS}" >> ${GITHUB_ENV} ;
            else  echo -e "TEMPORARY_CREDENTIALS=false" >> ${GITHUB_ENV} ;
          fi ;
          ####------------------------------------------------------------------
          keypair_name="${{ github.event.inputs.keypair-name }}" ;
          if [[ (${#keypair_name} -gt 0 ) || (${keypair_name} != '') ]]; then
            echo -e "  Private KeyPair Name [input-based]: '${keypair_name}'" ;
            echo "PRIVATE_KEYPAIR_NAME=${keypair_name}" >> ${GITHUB_ENV} ;
          fi ;
          ####------------------------------------------------------------------
          ## Correcting single-lined parameter spacing issues.
          declare -a private_keypair_secret=($(
              echo -en "${{ github.event.inputs.keypair-secret }}" \
              | sed -e 's|BEGIN RSA PRIVATE KEY|BEGIN~RSA~PRIVATE~KEY|' \
                    -e 's|END RSA PRIVATE KEY|END~RSA~PRIVATE~KEY|' \
                    -e 's|[[:space:]]|*|g'
            )) ;
          if [[ ${private_keypair_secret} != false ]]; then
                  ## Enforcing masking on Private KeyPair Secret content:
                  echo '::add-mask::${PRIVATE_KEYPAIR_SECRET}' ;
                  echo -e "Private KeyPair Secret [input-based]: '***'";
                  export PRIVATE_KEYPAIR_SECRET="$(
                      echo -en "${private_keypair_secret[@]}" \
                      | tr '\*' '\n' | tr '~' ' ' \
                      | base64 -w0
                    )" ;
                  ## echo "${PRIVATE_KEYPAIR_SECRET}" | base64 --decode ; echo -e ;
                  echo "PRIVATE_KEYPAIR_SECRET=${PRIVATE_KEYPAIR_SECRET}" >> ${GITHUB_ENV} ;
            else  echo "TEMPORARY_CREDENTIALS=false" >> ${GITHUB_ENV} ;
          fi ;
          ####------------------------------------------------------------------
          restore_project="${{ github.event.inputs.restore-project }}" ;
          if [[ (${#restore_project} -gt 0) || (${restore_project} != false) ]]; then
                  echo -e "    Restore Repository [input-based]: '${restore_project}'" ;
                  echo "RESTORE_PROJECT=${restore_project}" >> ${GITHUB_ENV} ;
            else  echo -e "\nWarning: Target Restore Project is invalid! " ;
                  exit 1 ;
          fi ;
          ####------------------------------------------------------------------
          restore_shaindex="${{ github.event.inputs.restore-shaindex }}" ;
          if [[ (${#restore_shaindex} -gt 0) || (${restore_shaindex} != false) ]]; then
                  echo -e "     Restore SHA Index [input-based]: '${restore_shaindex}'" ;
                  echo "RESTORE_SHAINDEX=${restore_shaindex}" >> ${GITHUB_ENV} ;
            else  echo -e "\nWarning: Target Restore Point is invalid! " ;
                  exit 2;
          fi ;
          ####------------------------------------------------------------------
          terraform_version="${{ github.event.inputs.terraform-version }}" ;
          if [[ (${#terraform_version} -gt 0 ) || (${terraform_version} != '') ]]; then
            echo -e "     Terraform Version [input-based]: '${terraform_version}'" ;
            echo "TERRAFORM_VERSION=${terraform_version}" >> ${GITHUB_ENV} ;
          fi ;
####----------------------------------------------------------------------------
      ## System Requirements
      - name: System Requirements
        uses: emvaldes/system-requirements@master
        id: system-requirements
        with:
          install-awscli-tool: true
          # install-custom-tools: 'netcat'
          install-default-tools: true
          install-terraform-cli: true
          target-terraform-version: ${TERRAFORM_VERSION}
          update-operating-system: true
          update-python-version: true
        continue-on-error: false
####----------------------------------------------------------------------------
      ## Installed Packages
      - name: Installed Packages
        id: installed-packages
        shell: bash
        run: |
          jq --version 2>/dev/null ;
          tree --version 2>/dev/null ;
          python --version 2>/dev/null ;
          aws --version 2>/dev/null ;
          terraform --version 2>/dev/null ;
####----------------------------------------------------------------------------
      ## Generating Credentials
      - name: Generating Credentials
        uses: emvaldes/generate-credentials@master
        id: request-credentials
        with:
          temporary-credentials: "${TEMPORARY_CREDENTIALS}"
          # aws-access-key-id: ${AWS_ACCESS_KEY_ID}
          # aws-default-account: ${AWS_DEFAULT_ACCOUNT}
          # aws-default-profile: ${AWS_DEFAULT_PROFILE}
          # aws-default-region: ${AWS_DEFAULT_REGION}
          # aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY}
          # devops-access-role: ${DEVOPS_ACCESS_ROLE}
          # devops-account-name: ${DEVOPS_ACCOUNT_NAME}
          # session-timestamp: "DevOpsPipeline--${SESSION_TIMESTAMP}"
        continue-on-error: false
####----------------------------------------------------------------------------
      ## Configuring Access
      - name: Configuring Access
        uses: emvaldes/configure-access@master
        id: provision-access
        with:
          private-keypair-file: ${PRIVATE_KEYPAIR_FILE}
          private-keypair-secret: "${PRIVATE_KEYPAIR_SECRET}"
        continue-on-error: false
####----------------------------------------------------------------------------
      ## Restore Terraform
      - name: Restore Terraform
        uses: ./
        id: restore-terraform
        with:
          restore-terraform: true
          restore-region: ${AWS_DEFAULT_REGION}
          restore-project: ${RESTORE_PROJECT}
          restore-shaindex: ${RESTORE_SHAINDEX}
## Terraform Log-levels: TRACE, DEBUG, INFO, WARN or ERROR
          terraform-loglevel: INFO
        continue-on-error: false
###----------------------------------------------------------------------------
